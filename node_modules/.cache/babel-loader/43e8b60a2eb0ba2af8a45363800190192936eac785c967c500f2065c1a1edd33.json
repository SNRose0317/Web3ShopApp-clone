{"ast":null,"code":"import React, { memo, useCallback, useMemo, useRef } from 'react';\nimport { useToggle } from '../../../../utilities/use-toggle.js';\nimport { classNames, variationName } from '../../../../utilities/css.js';\nimport styles from '../../IndexTable.scss.js';\nimport { useIndexRow, useIndexSelectionChange } from '../../../../utilities/index-provider/hooks.js';\nimport { SelectionType } from '../../../../utilities/index-provider/types.js';\nimport { Checkbox } from '../Checkbox/Checkbox.js';\nimport { RowContext, RowHoveredContext } from '../../../../utilities/index-table/context.js';\nconst Row = /*#__PURE__*/memo(function Row({\n  children,\n  selected,\n  id,\n  position,\n  subdued,\n  status,\n  tone,\n  disabled,\n  selectionRange,\n  rowType = 'data',\n  accessibilityLabel,\n  onNavigation,\n  onClick\n}) {\n  const {\n    selectable,\n    selectMode,\n    condensed\n  } = useIndexRow();\n  const onSelectionChange = useIndexSelectionChange();\n  const {\n    value: hovered,\n    setTrue: setHoverIn,\n    setFalse: setHoverOut\n  } = useToggle(false);\n  const handleInteraction = useCallback(event => {\n    event.stopPropagation();\n    let selectionType = SelectionType.Single;\n    if ('key' in event && event.key !== ' ' || !onSelectionChange) return;\n    if (event.nativeEvent.shiftKey) {\n      selectionType = SelectionType.Multi;\n    } else if (selectionRange) {\n      selectionType = SelectionType.Range;\n    }\n    const selection = selectionRange ?? id;\n    onSelectionChange(selectionType, !selected, selection, position);\n  }, [id, onSelectionChange, selected, selectionRange, position]);\n  const contextValue = useMemo(() => ({\n    itemId: id,\n    selected,\n    position,\n    onInteraction: handleInteraction,\n    disabled\n  }), [id, selected, disabled, position, handleInteraction]);\n  const primaryLinkElement = useRef(null);\n  const isNavigating = useRef(false);\n  const tableRowRef = useRef(null);\n  const tableRowCallbackRef = useCallback(node => {\n    tableRowRef.current = node;\n    const el = node?.querySelector('[data-primary-link]');\n    if (el) {\n      primaryLinkElement.current = el;\n    }\n  }, []);\n  const rowClassName = classNames(styles.TableRow, rowType === 'subheader' && styles['TableRow-subheader'], selectable && condensed && styles.condensedRow, selected && styles['TableRow-selected'], subdued && styles['TableRow-subdued'], hovered && !condensed && styles['TableRow-hovered'], disabled && styles['TableRow-disabled'], status && styles[variationName('status', status)], tone && styles[variationName('status', tone)], !selectable && !primaryLinkElement.current && styles['TableRow-unclickable']);\n  let handleRowClick;\n  if (!disabled && selectable || primaryLinkElement.current) {\n    handleRowClick = event => {\n      if (rowType === 'subheader') return;\n      if (!tableRowRef.current || isNavigating.current) {\n        return;\n      }\n      event.stopPropagation();\n      event.preventDefault();\n      if (onClick) {\n        onClick();\n        return;\n      }\n      if (primaryLinkElement.current && !selectMode) {\n        isNavigating.current = true;\n        const {\n          ctrlKey,\n          metaKey\n        } = event.nativeEvent;\n        if (onNavigation) {\n          onNavigation(id);\n        }\n        if ((ctrlKey || metaKey) && primaryLinkElement.current instanceof HTMLAnchorElement) {\n          isNavigating.current = false;\n          window.open(primaryLinkElement.current.href, '_blank');\n          return;\n        }\n        primaryLinkElement.current.dispatchEvent(new MouseEvent(event.type, event.nativeEvent));\n      } else {\n        isNavigating.current = false;\n        handleInteraction(event);\n      }\n    };\n  }\n  const RowWrapper = condensed ? 'li' : 'tr';\n  const checkboxMarkup = selectable ? /*#__PURE__*/React.createElement(Checkbox, {\n    accessibilityLabel: accessibilityLabel\n  }) : null;\n  return /*#__PURE__*/React.createElement(RowContext.Provider, {\n    value: contextValue\n  }, /*#__PURE__*/React.createElement(RowHoveredContext.Provider, {\n    value: hovered\n  }, /*#__PURE__*/React.createElement(RowWrapper, {\n    key: id,\n    id: id,\n    className: rowClassName,\n    onMouseEnter: setHoverIn,\n    onMouseLeave: setHoverOut,\n    onClick: handleRowClick,\n    ref: tableRowCallbackRef\n  }, checkboxMarkup, children)));\n});\nexport { Row };","map":{"version":3,"names":["React","memo","useCallback","useMemo","useRef","useToggle","classNames","variationName","styles","useIndexRow","useIndexSelectionChange","SelectionType","Checkbox","RowContext","RowHoveredContext","Row","children","selected","id","position","subdued","status","tone","disabled","selectionRange","rowType","accessibilityLabel","onNavigation","onClick","selectable","selectMode","condensed","onSelectionChange","value","hovered","setTrue","setHoverIn","setFalse","setHoverOut","handleInteraction","event","stopPropagation","selectionType","Single","key","nativeEvent","shiftKey","Multi","Range","selection","contextValue","itemId","onInteraction","primaryLinkElement","isNavigating","tableRowRef","tableRowCallbackRef","node","current","el","querySelector","rowClassName","TableRow","condensedRow","handleRowClick","preventDefault","ctrlKey","metaKey","HTMLAnchorElement","window","open","href","dispatchEvent","MouseEvent","type","RowWrapper","checkboxMarkup","createElement","Provider","className","onMouseEnter","onMouseLeave","ref"],"sources":["/Users/nick/Documents/app info front ui/node_modules/@shopify/polaris/build/esm/components/IndexTable/components/Row/Row.js"],"sourcesContent":["import React, { memo, useCallback, useMemo, useRef } from 'react';\nimport { useToggle } from '../../../../utilities/use-toggle.js';\nimport { classNames, variationName } from '../../../../utilities/css.js';\nimport styles from '../../IndexTable.scss.js';\nimport { useIndexRow, useIndexSelectionChange } from '../../../../utilities/index-provider/hooks.js';\nimport { SelectionType } from '../../../../utilities/index-provider/types.js';\nimport { Checkbox } from '../Checkbox/Checkbox.js';\nimport { RowContext, RowHoveredContext } from '../../../../utilities/index-table/context.js';\n\nconst Row = /*#__PURE__*/memo(function Row({\n  children,\n  selected,\n  id,\n  position,\n  subdued,\n  status,\n  tone,\n  disabled,\n  selectionRange,\n  rowType = 'data',\n  accessibilityLabel,\n  onNavigation,\n  onClick\n}) {\n  const {\n    selectable,\n    selectMode,\n    condensed\n  } = useIndexRow();\n  const onSelectionChange = useIndexSelectionChange();\n  const {\n    value: hovered,\n    setTrue: setHoverIn,\n    setFalse: setHoverOut\n  } = useToggle(false);\n  const handleInteraction = useCallback(event => {\n    event.stopPropagation();\n    let selectionType = SelectionType.Single;\n    if ('key' in event && event.key !== ' ' || !onSelectionChange) return;\n    if (event.nativeEvent.shiftKey) {\n      selectionType = SelectionType.Multi;\n    } else if (selectionRange) {\n      selectionType = SelectionType.Range;\n    }\n    const selection = selectionRange ?? id;\n    onSelectionChange(selectionType, !selected, selection, position);\n  }, [id, onSelectionChange, selected, selectionRange, position]);\n  const contextValue = useMemo(() => ({\n    itemId: id,\n    selected,\n    position,\n    onInteraction: handleInteraction,\n    disabled\n  }), [id, selected, disabled, position, handleInteraction]);\n  const primaryLinkElement = useRef(null);\n  const isNavigating = useRef(false);\n  const tableRowRef = useRef(null);\n  const tableRowCallbackRef = useCallback(node => {\n    tableRowRef.current = node;\n    const el = node?.querySelector('[data-primary-link]');\n    if (el) {\n      primaryLinkElement.current = el;\n    }\n  }, []);\n  const rowClassName = classNames(styles.TableRow, rowType === 'subheader' && styles['TableRow-subheader'], selectable && condensed && styles.condensedRow, selected && styles['TableRow-selected'], subdued && styles['TableRow-subdued'], hovered && !condensed && styles['TableRow-hovered'], disabled && styles['TableRow-disabled'], status && styles[variationName('status', status)], tone && styles[variationName('status', tone)], !selectable && !primaryLinkElement.current && styles['TableRow-unclickable']);\n  let handleRowClick;\n  if (!disabled && selectable || primaryLinkElement.current) {\n    handleRowClick = event => {\n      if (rowType === 'subheader') return;\n      if (!tableRowRef.current || isNavigating.current) {\n        return;\n      }\n      event.stopPropagation();\n      event.preventDefault();\n      if (onClick) {\n        onClick();\n        return;\n      }\n      if (primaryLinkElement.current && !selectMode) {\n        isNavigating.current = true;\n        const {\n          ctrlKey,\n          metaKey\n        } = event.nativeEvent;\n        if (onNavigation) {\n          onNavigation(id);\n        }\n        if ((ctrlKey || metaKey) && primaryLinkElement.current instanceof HTMLAnchorElement) {\n          isNavigating.current = false;\n          window.open(primaryLinkElement.current.href, '_blank');\n          return;\n        }\n        primaryLinkElement.current.dispatchEvent(new MouseEvent(event.type, event.nativeEvent));\n      } else {\n        isNavigating.current = false;\n        handleInteraction(event);\n      }\n    };\n  }\n  const RowWrapper = condensed ? 'li' : 'tr';\n  const checkboxMarkup = selectable ? /*#__PURE__*/React.createElement(Checkbox, {\n    accessibilityLabel: accessibilityLabel\n  }) : null;\n  return /*#__PURE__*/React.createElement(RowContext.Provider, {\n    value: contextValue\n  }, /*#__PURE__*/React.createElement(RowHoveredContext.Provider, {\n    value: hovered\n  }, /*#__PURE__*/React.createElement(RowWrapper, {\n    key: id,\n    id: id,\n    className: rowClassName,\n    onMouseEnter: setHoverIn,\n    onMouseLeave: setHoverOut,\n    onClick: handleRowClick,\n    ref: tableRowCallbackRef\n  }, checkboxMarkup, children)));\n});\n\nexport { Row };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}