{"ast":null,"code":"import { useState, useCallback } from 'react';\nlet SelectionType;\n(function (SelectionType) {\n  SelectionType[\"All\"] = \"all\";\n  SelectionType[\"Page\"] = \"page\";\n  SelectionType[\"Multi\"] = \"multi\";\n  SelectionType[\"Single\"] = \"single\";\n  SelectionType[\"Range\"] = \"range\";\n})(SelectionType || (SelectionType = {}));\nfunction defaultResourceIDResolver(resource) {\n  if ('id' in resource) {\n    return resource.id;\n  }\n  throw new Error('Your resource does not directly contain an `id`. Pass a `resourceIDResolver` to `useIndexResourceState`');\n}\nfunction useIndexResourceState(resources, {\n  selectedResources: initSelectedResources = [],\n  allResourcesSelected: initAllResourcesSelected = false,\n  resourceIDResolver = defaultResourceIDResolver,\n  resourceFilter = undefined\n} = {\n  selectedResources: [],\n  allResourcesSelected: false,\n  resourceIDResolver: defaultResourceIDResolver,\n  resourceFilter: undefined\n}) {\n  const [selectedResources, setSelectedResources] = useState(initSelectedResources);\n  const [allResourcesSelected, setAllResourcesSelected] = useState(initAllResourcesSelected);\n  const handleSelectionChange = useCallback((selectionType, isSelecting, selection) => {\n    if (selectionType === SelectionType.All) {\n      setAllResourcesSelected(isSelecting);\n    } else if (allResourcesSelected) {\n      setAllResourcesSelected(false);\n    }\n    switch (selectionType) {\n      case SelectionType.Single:\n        setSelectedResources(newSelectedResources => isSelecting ? [...newSelectedResources, selection] : newSelectedResources.filter(id => id !== selection));\n        break;\n      case SelectionType.All:\n      case SelectionType.Page:\n        if (resourceFilter) {\n          const filteredResources = resources.filter(resourceFilter);\n          setSelectedResources(isSelecting && selectedResources.length < filteredResources.length ? filteredResources.map(resourceIDResolver) : []);\n        } else {\n          setSelectedResources(isSelecting ? resources.map(resourceIDResolver) : []);\n        }\n        break;\n      case SelectionType.Multi:\n        if (!selection) break;\n        setSelectedResources(currentSelectedResources => {\n          const ids = [];\n          const filteredResources = resourceFilter ? resources.filter(resourceFilter) : resources;\n          for (let i = selection[0]; i <= selection[1]; i++) {\n            if (filteredResources.includes(resources[i])) {\n              const id = resourceIDResolver(resources[i]);\n              if (isSelecting && !currentSelectedResources.includes(id) || !isSelecting && currentSelectedResources.includes(id)) {\n                ids.push(id);\n              }\n            }\n          }\n          return isSelecting ? [...currentSelectedResources, ...ids] : currentSelectedResources.filter(id => !ids.includes(id));\n        });\n        break;\n      case SelectionType.Range:\n        if (!selection) break;\n        setSelectedResources(currentSelectedResources => {\n          const filteredResources = resourceFilter ? resources.filter(resourceFilter) : resources;\n          const resourceIds = filteredResources.map(resourceIDResolver);\n          const selectedIds = resourceIds.slice(Number(selection[0]), Number(selection[1]) + 1);\n          const isIndeterminate = selectedIds.some(id => {\n            return selectedResources.includes(id);\n          });\n          const isChecked = selectedIds.every(id => {\n            return selectedResources.includes(id);\n          });\n          const isSelectingAllInRange = !isChecked && (isSelecting || isIndeterminate);\n          const nextSelectedResources = isSelectingAllInRange ? [...new Set([...currentSelectedResources, ...selectedIds]).values()] : currentSelectedResources.filter(id => !selectedIds.includes(id));\n          return nextSelectedResources;\n        });\n        break;\n    }\n  }, [allResourcesSelected, resourceFilter, selectedResources, resources, resourceIDResolver]);\n  const clearSelection = useCallback(() => {\n    setSelectedResources([]);\n    setAllResourcesSelected(false);\n  }, []);\n  const removeSelectedResources = useCallback(removeResources => {\n    const selectedResourcesCopy = [...selectedResources];\n    const newSelectedResources = selectedResourcesCopy.filter(resource => !removeResources.includes(resource));\n    setSelectedResources(newSelectedResources);\n    if (newSelectedResources.length === 0) {\n      setAllResourcesSelected(false);\n    }\n  }, [selectedResources]);\n  return {\n    selectedResources,\n    allResourcesSelected,\n    handleSelectionChange,\n    clearSelection,\n    removeSelectedResources\n  };\n}\nexport { SelectionType, useIndexResourceState };","map":{"version":3,"names":["useState","useCallback","SelectionType","defaultResourceIDResolver","resource","id","Error","useIndexResourceState","resources","selectedResources","initSelectedResources","allResourcesSelected","initAllResourcesSelected","resourceIDResolver","resourceFilter","undefined","setSelectedResources","setAllResourcesSelected","handleSelectionChange","selectionType","isSelecting","selection","All","Single","newSelectedResources","filter","Page","filteredResources","length","map","Multi","currentSelectedResources","ids","i","includes","push","Range","resourceIds","selectedIds","slice","Number","isIndeterminate","some","isChecked","every","isSelectingAllInRange","nextSelectedResources","Set","values","clearSelection","removeSelectedResources","removeResources","selectedResourcesCopy"],"sources":["/Users/nick/Documents/app info front ui/node_modules/@shopify/polaris/build/esm/utilities/use-index-resource-state.js"],"sourcesContent":["import { useState, useCallback } from 'react';\n\nlet SelectionType;\n(function (SelectionType) {\n  SelectionType[\"All\"] = \"all\";\n  SelectionType[\"Page\"] = \"page\";\n  SelectionType[\"Multi\"] = \"multi\";\n  SelectionType[\"Single\"] = \"single\";\n  SelectionType[\"Range\"] = \"range\";\n})(SelectionType || (SelectionType = {}));\nfunction defaultResourceIDResolver(resource) {\n  if ('id' in resource) {\n    return resource.id;\n  }\n  throw new Error('Your resource does not directly contain an `id`. Pass a `resourceIDResolver` to `useIndexResourceState`');\n}\nfunction useIndexResourceState(resources, {\n  selectedResources: initSelectedResources = [],\n  allResourcesSelected: initAllResourcesSelected = false,\n  resourceIDResolver = defaultResourceIDResolver,\n  resourceFilter = undefined\n} = {\n  selectedResources: [],\n  allResourcesSelected: false,\n  resourceIDResolver: defaultResourceIDResolver,\n  resourceFilter: undefined\n}) {\n  const [selectedResources, setSelectedResources] = useState(initSelectedResources);\n  const [allResourcesSelected, setAllResourcesSelected] = useState(initAllResourcesSelected);\n  const handleSelectionChange = useCallback((selectionType, isSelecting, selection) => {\n    if (selectionType === SelectionType.All) {\n      setAllResourcesSelected(isSelecting);\n    } else if (allResourcesSelected) {\n      setAllResourcesSelected(false);\n    }\n    switch (selectionType) {\n      case SelectionType.Single:\n        setSelectedResources(newSelectedResources => isSelecting ? [...newSelectedResources, selection] : newSelectedResources.filter(id => id !== selection));\n        break;\n      case SelectionType.All:\n      case SelectionType.Page:\n        if (resourceFilter) {\n          const filteredResources = resources.filter(resourceFilter);\n          setSelectedResources(isSelecting && selectedResources.length < filteredResources.length ? filteredResources.map(resourceIDResolver) : []);\n        } else {\n          setSelectedResources(isSelecting ? resources.map(resourceIDResolver) : []);\n        }\n        break;\n      case SelectionType.Multi:\n        if (!selection) break;\n        setSelectedResources(currentSelectedResources => {\n          const ids = [];\n          const filteredResources = resourceFilter ? resources.filter(resourceFilter) : resources;\n          for (let i = selection[0]; i <= selection[1]; i++) {\n            if (filteredResources.includes(resources[i])) {\n              const id = resourceIDResolver(resources[i]);\n              if (isSelecting && !currentSelectedResources.includes(id) || !isSelecting && currentSelectedResources.includes(id)) {\n                ids.push(id);\n              }\n            }\n          }\n          return isSelecting ? [...currentSelectedResources, ...ids] : currentSelectedResources.filter(id => !ids.includes(id));\n        });\n        break;\n      case SelectionType.Range:\n        if (!selection) break;\n        setSelectedResources(currentSelectedResources => {\n          const filteredResources = resourceFilter ? resources.filter(resourceFilter) : resources;\n          const resourceIds = filteredResources.map(resourceIDResolver);\n          const selectedIds = resourceIds.slice(Number(selection[0]), Number(selection[1]) + 1);\n          const isIndeterminate = selectedIds.some(id => {\n            return selectedResources.includes(id);\n          });\n          const isChecked = selectedIds.every(id => {\n            return selectedResources.includes(id);\n          });\n          const isSelectingAllInRange = !isChecked && (isSelecting || isIndeterminate);\n          const nextSelectedResources = isSelectingAllInRange ? [...new Set([...currentSelectedResources, ...selectedIds]).values()] : currentSelectedResources.filter(id => !selectedIds.includes(id));\n          return nextSelectedResources;\n        });\n        break;\n    }\n  }, [allResourcesSelected, resourceFilter, selectedResources, resources, resourceIDResolver]);\n  const clearSelection = useCallback(() => {\n    setSelectedResources([]);\n    setAllResourcesSelected(false);\n  }, []);\n  const removeSelectedResources = useCallback(removeResources => {\n    const selectedResourcesCopy = [...selectedResources];\n    const newSelectedResources = selectedResourcesCopy.filter(resource => !removeResources.includes(resource));\n    setSelectedResources(newSelectedResources);\n    if (newSelectedResources.length === 0) {\n      setAllResourcesSelected(false);\n    }\n  }, [selectedResources]);\n  return {\n    selectedResources,\n    allResourcesSelected,\n    handleSelectionChange,\n    clearSelection,\n    removeSelectedResources\n  };\n}\n\nexport { SelectionType, useIndexResourceState };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}