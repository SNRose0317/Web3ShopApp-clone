{"ast":null,"code":"import { useState } from 'react';\nimport { getMediaConditions, breakpoints } from '@shopify/polaris-tokens';\nimport { isServer } from './target.js';\nimport { useIsomorphicLayoutEffect } from './use-isomorphic-layout-effect.js';\nconst Breakpoints = {\n  // TODO: Update to smDown\n  navigationBarCollapsed: '767.95px',\n  // TODO: Update to lgDown\n  stackedContent: '1039.95px'\n};\nconst noWindowMatches = {\n  media: '',\n  addListener: noop,\n  removeListener: noop,\n  matches: false,\n  onchange: noop,\n  addEventListener: noop,\n  removeEventListener: noop,\n  dispatchEvent: _ => true\n};\nfunction noop() {}\nfunction navigationBarCollapsed() {\n  return typeof window === 'undefined' ? noWindowMatches : window.matchMedia(`(max-width: ${Breakpoints.navigationBarCollapsed})`);\n}\nfunction stackedContent() {\n  return typeof window === 'undefined' ? noWindowMatches : window.matchMedia(`(max-width: ${Breakpoints.stackedContent})`);\n}\n\n/**\n * Directional alias for each Polaris `breakpoints` token.\n *\n * @example 'smUp' | 'smDown' | 'smOnly' | 'mdUp' | etc.\n */\n\nconst breakpointsQueryEntries = getBreakpointsQueryEntries(breakpoints);\nfunction getMatches(defaults) {\n  if (!isServer) {\n    return Object.fromEntries(breakpointsQueryEntries.map(([directionAlias, query]) => [directionAlias, window.matchMedia(query).matches]));\n  }\n  if (typeof defaults === 'object' && defaults !== null) {\n    return Object.fromEntries(breakpointsQueryEntries.map(([directionAlias]) => [directionAlias, defaults[directionAlias] ?? false]));\n  }\n  return Object.fromEntries(breakpointsQueryEntries.map(([directionAlias]) => [directionAlias, defaults ?? false]));\n}\n/**\n * Retrieves media query matches for each directional Polaris `breakpoints` alias.\n *\n * @example\n * const {smUp} = useBreakpoints();\n * return smUp && 'Hello world';\n *\n * @example\n * const {mdUp} = useBreakpoints({defaults: {mdUp: true}});\n * mdUp //=> `true` during SSR\n *\n * @example\n * const breakpoints = useBreakpoints({defaults: true});\n * breakpoints //=> All values will be `true` during SSR\n */\nfunction useBreakpoints(options) {\n  const [breakpoints, setBreakpoints] = useState(getMatches(options?.defaults));\n  useIsomorphicLayoutEffect(() => {\n    const mediaQueryLists = breakpointsQueryEntries.map(([_, query]) => window.matchMedia(query));\n    const handler = () => setBreakpoints(getMatches());\n    mediaQueryLists.forEach(mql => {\n      if (mql.addListener) {\n        mql.addListener(handler);\n      } else {\n        mql.addEventListener('change', handler);\n      }\n    });\n    return () => {\n      mediaQueryLists.forEach(mql => {\n        if (mql.removeListener) {\n          mql.removeListener(handler);\n        } else {\n          mql.removeEventListener('change', handler);\n        }\n      });\n    };\n  }, []);\n  return breakpoints;\n}\n\n/**\n * Converts `breakpoints` tokens into directional media query entries.\n *\n * @example\n * const breakpointsQueryEntries = getBreakpointsQueryEntries(breakpoints);\n * breakpointsQueryEntries === [\n *   ['xsUp', '(min-width: ...)'],\n *   ['xsDown', '(max-width: ...)'],\n *   ['xsOnly', '(min-width: ...) and (max-width: ...)'],\n *   ['smUp', '(min-width: ...) and (max-width: ...)'],\n *   ['mdUp', '(min-width: ...) and (max-width: ...)'],\n *   // etc.\n * ]\n */\nfunction getBreakpointsQueryEntries(breakpoints) {\n  const mediaConditionEntries = Object.entries(getMediaConditions(breakpoints));\n  return mediaConditionEntries.map(([breakpointsToken, mediaConditions]) => Object.entries(mediaConditions).map(([direction, mediaCondition]) => {\n    const breakpointsAlias = breakpointsToken.split('-')[1];\n\n    // e.g. smUp, smDown, smOnly, etc.\n    const directionAlias = `${breakpointsAlias}${capitalize(direction)}`;\n    return [directionAlias, mediaCondition];\n  })).flat();\n}\nfunction capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nexport { getBreakpointsQueryEntries, navigationBarCollapsed, stackedContent, useBreakpoints };","map":{"version":3,"names":["useState","getMediaConditions","breakpoints","isServer","useIsomorphicLayoutEffect","Breakpoints","navigationBarCollapsed","stackedContent","noWindowMatches","media","addListener","noop","removeListener","matches","onchange","addEventListener","removeEventListener","dispatchEvent","_","window","matchMedia","breakpointsQueryEntries","getBreakpointsQueryEntries","getMatches","defaults","Object","fromEntries","map","directionAlias","query","useBreakpoints","options","setBreakpoints","mediaQueryLists","handler","forEach","mql","mediaConditionEntries","entries","breakpointsToken","mediaConditions","direction","mediaCondition","breakpointsAlias","split","capitalize","flat","str","charAt","toUpperCase","slice"],"sources":["/Users/nick/Documents/app info front ui/node_modules/@shopify/polaris/build/esm/utilities/breakpoints.js"],"sourcesContent":["import { useState } from 'react';\nimport { getMediaConditions, breakpoints } from '@shopify/polaris-tokens';\nimport { isServer } from './target.js';\nimport { useIsomorphicLayoutEffect } from './use-isomorphic-layout-effect.js';\n\nconst Breakpoints = {\n  // TODO: Update to smDown\n  navigationBarCollapsed: '767.95px',\n  // TODO: Update to lgDown\n  stackedContent: '1039.95px'\n};\nconst noWindowMatches = {\n  media: '',\n  addListener: noop,\n  removeListener: noop,\n  matches: false,\n  onchange: noop,\n  addEventListener: noop,\n  removeEventListener: noop,\n  dispatchEvent: _ => true\n};\nfunction noop() {}\nfunction navigationBarCollapsed() {\n  return typeof window === 'undefined' ? noWindowMatches : window.matchMedia(`(max-width: ${Breakpoints.navigationBarCollapsed})`);\n}\nfunction stackedContent() {\n  return typeof window === 'undefined' ? noWindowMatches : window.matchMedia(`(max-width: ${Breakpoints.stackedContent})`);\n}\n\n/**\n * Directional alias for each Polaris `breakpoints` token.\n *\n * @example 'smUp' | 'smDown' | 'smOnly' | 'mdUp' | etc.\n */\n\nconst breakpointsQueryEntries = getBreakpointsQueryEntries(breakpoints);\nfunction getMatches(defaults) {\n  if (!isServer) {\n    return Object.fromEntries(breakpointsQueryEntries.map(([directionAlias, query]) => [directionAlias, window.matchMedia(query).matches]));\n  }\n  if (typeof defaults === 'object' && defaults !== null) {\n    return Object.fromEntries(breakpointsQueryEntries.map(([directionAlias]) => [directionAlias, defaults[directionAlias] ?? false]));\n  }\n  return Object.fromEntries(breakpointsQueryEntries.map(([directionAlias]) => [directionAlias, defaults ?? false]));\n}\n/**\n * Retrieves media query matches for each directional Polaris `breakpoints` alias.\n *\n * @example\n * const {smUp} = useBreakpoints();\n * return smUp && 'Hello world';\n *\n * @example\n * const {mdUp} = useBreakpoints({defaults: {mdUp: true}});\n * mdUp //=> `true` during SSR\n *\n * @example\n * const breakpoints = useBreakpoints({defaults: true});\n * breakpoints //=> All values will be `true` during SSR\n */\nfunction useBreakpoints(options) {\n  const [breakpoints, setBreakpoints] = useState(getMatches(options?.defaults));\n  useIsomorphicLayoutEffect(() => {\n    const mediaQueryLists = breakpointsQueryEntries.map(([_, query]) => window.matchMedia(query));\n    const handler = () => setBreakpoints(getMatches());\n    mediaQueryLists.forEach(mql => {\n      if (mql.addListener) {\n        mql.addListener(handler);\n      } else {\n        mql.addEventListener('change', handler);\n      }\n    });\n    return () => {\n      mediaQueryLists.forEach(mql => {\n        if (mql.removeListener) {\n          mql.removeListener(handler);\n        } else {\n          mql.removeEventListener('change', handler);\n        }\n      });\n    };\n  }, []);\n  return breakpoints;\n}\n\n/**\n * Converts `breakpoints` tokens into directional media query entries.\n *\n * @example\n * const breakpointsQueryEntries = getBreakpointsQueryEntries(breakpoints);\n * breakpointsQueryEntries === [\n *   ['xsUp', '(min-width: ...)'],\n *   ['xsDown', '(max-width: ...)'],\n *   ['xsOnly', '(min-width: ...) and (max-width: ...)'],\n *   ['smUp', '(min-width: ...) and (max-width: ...)'],\n *   ['mdUp', '(min-width: ...) and (max-width: ...)'],\n *   // etc.\n * ]\n */\nfunction getBreakpointsQueryEntries(breakpoints) {\n  const mediaConditionEntries = Object.entries(getMediaConditions(breakpoints));\n  return mediaConditionEntries.map(([breakpointsToken, mediaConditions]) => Object.entries(mediaConditions).map(([direction, mediaCondition]) => {\n    const breakpointsAlias = breakpointsToken.split('-')[1];\n\n    // e.g. smUp, smDown, smOnly, etc.\n    const directionAlias = `${breakpointsAlias}${capitalize(direction)}`;\n    return [directionAlias, mediaCondition];\n  })).flat();\n}\nfunction capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport { getBreakpointsQueryEntries, navigationBarCollapsed, stackedContent, useBreakpoints };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}